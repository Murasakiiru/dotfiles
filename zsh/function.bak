#!/bin/bash
#Script support version 17/04
#Modifs à prévoir :
# -Selection d'une ligne et relancement de la connexion
# -Découper en fonctions
#
#
#
test_port(){
    #Sélectionne au hasard un nombre entre 1024 et 49151 
    for i in $(( 1024+( $(od -An -N2 -i /dev/random) )%(49151) ))
        #nmap -p sur ce port pour connaitre son état, si closed on le
        #sélectionne
        do port_status=$(nmap -p$i support | awk 'NR==6' | awk '{print $2}')
        echo "status="$port_status
        if [[ $port_status = closed ]];
        then
            #Pour le port sélectionné, on le met dans la variable port_distant
            port_distant=$(nmap -p$i support | awk 'NR==6' | awk -F "/" '{print $1}')
            #echo $port_distant
            break
        fi
    done
    #On affiche le port distant disponible
    echo "Le port "$port_distant" est disponible :"
    return $port_distant

}
ouverture_tunnel(){
    
    echo $port_distant
    echo "Enter the digit for the internal ip addr, the client name, the distant port and login if !root :"
    read digit nom_client port_select login_ssh
    #Toutes les valeurs sont renseignées
    if [[ -n $digit && -n $nom_client  && -n $port_select && -n $login_ssh ]];
    then
        #Envoi les différentes valeurs renseignées dans le fichier log_long
        echo "$date_ts \t client : $nom_client \t\t | \t localip : 127.0.0.$digit \t | \t remoteport : $port_select" >> $log_long
        ssh -L127.0.0.$digit:8081:127.0.0.1:8081 -L127.0.0.$digit:8443:127.0.0.1:8443 -p $port_select $login_ssh@support
    fi
    #Login SSH non renseigné
    if [[ -n $digit && -n $nom_client  && -n $port_select && -z $login_ssh ]];
    then
        #Envoi les différentes valeurs renseignées dans le fichier log_long
        echo "$date_ts \t client : $nom_client \t\t | \t localip : 127.0.0.$digit \t | \t remoteport : $port_select" >> $log_long
        ssh -L127.0.0.$digit:8081:127.0.0.1:8081 -L127.0.0.$digit:8443:127.0.0.1:8443 -p $port_select root@support
    fi
    #Login SSH et port distant non renseigné
    if [[ -n $digit && -n $nom_client  && -z $port_select && -z $login_ssh ]];
    then
        #Envoi les différentes valeurs renseignées dans le fichier log_long
        echo "$date_ts \t client : $nom_client \t\t | \t localip : 127.0.0.$digit \t | \t remoteport : $port_distant" >> $log_long
        ssh -L127.0.0.$digit:8081:127.0.0.1:8081 -L127.0.0.$digit:8443:127.0.0.1:8443 -p $port_distant root@support
    fi
    #Port distant non renseigné
    if [[ -n $digit && -n $nom_client  && -z $port_select && -n $login_ssh ]];
    then
        #Envoi les différentes valeurs renseignées dans le fichier log_long
        echo "$date_ts \t client : $nom_client \t\t | \t localip : 127.0.0.$digit \t | \t remoteport : $port_distant" >> $log_long
        ssh -L127.0.0.$digit:8081:127.0.0.1:8081 -L127.0.0.$digit:8443:127.0.0.1:8443 -p $port_distant $login_ssh@support
    fi


}


affichage_tunnels(){
    test=$1
    echo $test
    if [[ $1 = long ]];
    then
        #date=`date +"%D %T"`
        echo "--------------------------------------------------------------------------"
        ps aux | grep support | grep -v grep | awk '{print $2, $9, $10, $11, $12, $13, $14, $15}'
        echo "--------------------------------------------------------------------------"
    fi
    if [[ $1 = court ]];
    then
        #Suppression des lignes supérieurs à 1mois
        #Remplacer le timestamp par la date lisible
        cat $log_long | awk -v date_jour=$date_ts 'date_jour-$1<2678400 {print $0}' | perl -p -e 's/^([0-9]*)/"".localtime($1).""/e'
    fi
}

support() {
choix=""
date_ts=$(date +"%s")
port_distant=0
digit=0
nom_client=""
login_ssh=""
port_status="Unknown"
port=0
log_long=~/support.log
log_court=~/support_short.log
    while [ "$choix" != 'Q' ]
    do
      echo " ========================"
      echo "||Script tunnels support||"
      echo " ========================"
      echo "1)Ouverture d'un nouveau tunnel"
      echo "2)Afficher les tunnels ouverts"
      echo "3)Afficher les derniers tunnels montés"
      read choix
      case "$choix" in
        1 )
            clear
            test_port
            ouverture_tunnel
            ;;

        2 )
            clear
            affichage_tunnels long
            ;;

        3 )
            clear
            affichage_tunnels court
            ;;

        * ) exit 0;;
      esac
    done
}

